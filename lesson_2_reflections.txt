Question 1 - What happens when you initialize a repository? Why do you need to do it?

When we initialize a repository, it just creates an empty repository with no commits and all the files, if existing in the directory, are left untracked. So, hence, there are zero commits and hence, the history will be empty.

Question 2 - How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is a intermediate area which is used to store the files present in the working directory, that needs to be tracked in the commit... The files added in the staging area are transferred into the repository, once the commit has been made. It gives us an opportunity to reflect and introspect on our decision to select particular file(s) for being tracked by git system.

Question 3 - How can you use the staging area to make sure you have one commit per logical change?

Staging area is a place where we can see what changes will happen to the repository, if the changes are committed... So, we can carefully observe that the files in the staging area only represent a single logical change which aids us in enforcing the priniple of 'one commit per logical change'.

Question 4 - What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches allow us to diverge from the master branch and hence, gives us a space where we can try out an experimental feature or something which we are not sure, should be included in the final project.. These help us to keep our history organised and we can avoid the overhead which would have incurred, in case, we were still continuing to work on the master/ original branch.

Hence, it aids us in exploration and working on new ideas as well as allow us to track different versions of the project in a much more simplified and efficient manner.. If the idea or objective is successful, then, we can merge the user-created branch with the master or in case of failure, we could discard the branch itself.. 

Since, each derived branch is independent of their base branch, therefore, we have the freedom to not only work on multiple branches in parallel, but also, can do so without the risk of affecting the base branch.